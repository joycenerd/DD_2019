$date
	Sun Jun  2 17:39:43 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 16 ! mpy_ans [15:0] $end
$var reg 4 " cnt_right [3:0] $end
$var reg 4 # cnt_test [3:0] $end
$var reg 16 $ correct_ans [15:0] $end
$var reg 16 % testInput_a [15:0] $end
$var reg 16 & testInput_b [15:0] $end
$scope module mpy_top $end
$var wire 16 ' in_a [15:0] $end
$var wire 16 ( in_b [15:0] $end
$var wire 16 ) out [15:0] $end
$var wire 16 * multiply_out [15:0] $end
$var wire 1 + b_sign $end
$var wire 11 , b_mantissa [10:0] $end
$var wire 5 - b_exp [4:0] $end
$var wire 1 . a_sign $end
$var wire 11 / a_mantissa [10:0] $end
$var wire 5 0 a_exp [4:0] $end
$var reg 16 1 multiplyin_a [15:0] $end
$var reg 16 2 multiplyin_b [15:0] $end
$var reg 5 3 out_exp [4:0] $end
$var reg 11 4 out_mantissa [10:0] $end
$var reg 1 5 out_sign $end
$scope module mpy $end
$var wire 16 6 in_a [15:0] $end
$var wire 16 7 in_b [15:0] $end
$var wire 16 8 out [15:0] $end
$var reg 5 9 a_exp [4:0] $end
$var reg 11 : a_mantissa [10:0] $end
$var reg 1 ; a_sign $end
$var reg 5 < b_exp [4:0] $end
$var reg 11 = b_mantissa [10:0] $end
$var reg 1 > b_sign $end
$var reg 5 ? out_exp [4:0] $end
$var reg 10 @ out_mantissa [9:0] $end
$var reg 1 A out_sign $end
$var reg 22 B product [21:0] $end
$upscope $end
$upscope $end
$scope task failure_case $end
$var reg 16 C ans [15:0] $end
$var reg 16 D mpy_ans [15:0] $end
$var reg 16 E testInput_a [15:0] $end
$var reg 16 F testInput_b [15:0] $end
$upscope $end
$scope task success_case $end
$var reg 16 G ans [15:0] $end
$var reg 16 H testInput_a [15:0] $end
$var reg 16 I testInput_b [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
bx @
bx ?
x>
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
bx 6
x5
b0xxxxxxxxxx 4
bx 3
bx 2
bx 1
bx 0
b1xxxxxxxxxx /
x.
bx -
b1xxxxxxxxxx ,
x+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
b0 #
b0 "
bx !
$end
#1000
b101011100 4
b11101 3
b111010101011100 !
b111010101011100 )
05
b101011100 @
b101010111000011010110 B
b11101 ?
b111010101011100 *
b111010101011100 8
0A
b10111001011 =
b11101 <
1>
b11101100111 :
b1110 9
1;
b1111010111001011 2
b1111010111001011 7
b1011101101100111 1
b1011101101100111 6
1+
b11101 -
b10111001011 ,
1.
b1110 0
b11101100111 /
b1 #
b111010101011100 $
b1111010111001011 &
b1111010111001011 (
b1011101101100111 %
b1011101101100111 '
#11000
b1 "
b111010101011100 G
b1111010111001011 I
b1011101101100111 H
#12000
b1010101110 4
b10111 3
b1101111010101110 !
b1101111010101110 )
15
b1010101110 @
b110101011100111000010 B
b10111 ?
b1101111010101110 *
b1101111010101110 8
1A
b11011011011 =
b10 <
b11111001100 :
b11 9
0;
b1000101011011011 2
b1000101011011011 7
b111111001100 1
b111111001100 6
b10 -
b11011011011 ,
0.
b11 0
b11111001100 /
b10 #
b1000000000000010 $
b1000101011011011 &
b1000101011011011 (
b111111001100 %
b111111001100 '
#22000
b1101111010101110 D
b1000000000000010 C
b1000101011011011 F
b111111001100 E
#23000
b1000011000 4
b1001111000011000 !
b1001111000011000 )
b111 3
b1000011000 @
b110000101111111000100 B
b1001111000011000 *
b1001111000011000 8
b111 ?
b11111100110 =
b1 <
b11000101100 :
b10100 9
b1000011111100110 2
b1000011111100110 7
b101001000101100 1
b101001000101100 6
b1 -
b11111100110 ,
b10100 0
b11000101100 /
b11 #
b1001111000011000 $
b1000011111100110 &
b1000011111100110 (
b101001000101100 %
b101001000101100 '
#33000
b10 "
b1001111000011000 G
b1000011111100110 I
b101001000101100 H
#34000
b101001100 4
b1101110101001100 !
b1101110101001100 )
b10111 3
b101001100 @
b101010011000101010000 B
b1101110101001100 *
b1101110101001100 8
b10111 ?
b11110001001 =
b1010 <
b10110100000 :
b11011 9
b1010101110001001 2
b1010101110001001 7
b110110110100000 1
b110110110100000 6
b1010 -
b11110001001 ,
b11011 0
b10110100000 /
b100 #
b1101110101001100 $
b1010101110001001 &
b1010101110001001 (
b110110110100000 %
b110110110100000 '
#44000
b11 "
b1101110101001100 G
b1010101110001001 I
b110110110100000 H
#45000
b11001010 4
b1110000011001010 !
b1110000011001010 )
b11000 3
b11001010 @
b1110000011001010 *
b1110000011001010 8
b11000 ?
b100110010100011111011 B
b10011110101 =
b1101 <
b11110111011 :
b11001 9
b1011010011110101 2
b1011010011110101 7
b110011110111011 1
b110011110111011 6
b1101 -
b10011110101 ,
b11001 0
b11110111011 /
b101 #
b1110000011001010 $
b1011010011110101 &
b1011010011110101 (
b110011110111011 %
b110011110111011 '
#55000
b100 "
b1110000011001010 G
b1011010011110101 I
b110011110111011 H
#56000
b0 4
b0 3
b0 !
b0 )
05
b10110 -
b11110001010 ,
b0 0
b10000000000 /
b110 #
b0 $
b1101101110001010 &
b1101101110001010 (
b0 %
b0 '
#66000
b101 "
b0 G
b1101101110001010 I
b0 H
#67000
b1010010 @
b100010100100000000000 B
b11100 ?
b111000001010010 *
b111000001010010 8
0A
b10000000000 =
b0 <
0>
b10001010010 :
b1011 9
b0 2
b0 7
b10110001010010 1
b10110001010010 6
0+
b0 -
b10000000000 ,
b0 4
b0 3
b0 !
b0 )
05
b1011 0
b10001010010 /
b111 #
b0 &
b0 (
b10110001010010 %
b10110001010010 '
#77000
b110 "
b0 I
b10110001010010 H
#78000
b1001000101 @
b110010001010111001111 B
b110111001000101 *
b110111001000101 8
b11011 ?
b10110101011 =
b10 <
1>
b10001101101 :
b1000 9
1;
b1000100110101011 2
b1000100110101011 7
b1010000001101101 1
b1010000001101101 6
b1001000101 4
b110111001000101 !
b110111001000101 )
b11011 3
1+
b10 -
b10110101011 ,
1.
b1000 0
b10001101101 /
b1000 #
b11001 $
b1000100110101011 &
b1000100110101011 (
b1010000001101101 %
b1010000001101101 '
#88000
b110111001000101 D
b11001 C
b1000100110101011 F
b1010000001101101 E
